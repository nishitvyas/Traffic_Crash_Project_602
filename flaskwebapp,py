from flask import Flask, render_template, request
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
import pickle



#instance of Flask
app = Flask(__name__) 

#loading the pre-trained model and vectorizer through pickle
loaded_model = pickle.load(open('model1.pkl', 'rb'))
#load_tfvect = pickle.load(open('tfvect.pkl', 'rb'))


# def fake_news_det(news):
#     input_data = [news]
#     vectorized_input_data = load_tfvect.transform(input_data)
#     prediction = loaded_model.predict(vectorized_input_data)
#     return prediction

def pred_class(file):
    df = pd.read_csv(file)
    preds = loaded_model.predict(df)
    df['target'] = preds
    return(df)

#route for frontend 
@app.route('/')
def home():
    return render_template('index.html')

#Gets data from form and processes and returns the response back to frontend
@app.route('/predict', methods=['POST'])
def predict():
    if request.method == 'POST':
        file = request.form['userfile']
        pred = pred_class(file)
        print(pred)
        return render_template('index.html', prediction=pred)
    else:
        return render_template('index.html', prediction="Something went wrong")
